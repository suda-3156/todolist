
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id       String    @id @db.VarChar(255)
  role_id       Int
  name          String    @unique @db.VarChar(255)
  email         String    @unique @db.VarChar(255)
  password      String    @db.VarChar(255)
  last_login    DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @relation(fields: [role_id], references: [role_id], onUpdate: Restrict, onDelete: Restrict)
  todolist      Todolist[]
  note          Note[]
}

model Role {
  role_id       Int       @id @default(autoincrement())
  role          String    @db.VarChar(255) @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User[]
}

model Style {
  style_id      Int       @id @default(autoincrement())
  style         String    @db.VarChar(255) @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  todolist      Todolist[]
  todo          Todo[]
  note          Note[]
}

model Todolist {
  todolist_id     String    @id @db.VarChar(255)
  user_id         String
  style_id        Int
  todolist_title  String    @default("No title")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  style           Style     @relation(fields: [style_id], references: [style_id], onDelete: Restrict, onUpdate: Restrict)
  todo            Todo[]
}

model Todo {
  todo_id         String    @id @db.VarChar(255)
  todolist_id     String
  style_id        Int
  todo_title      String    @default("No title") @db.VarChar(255)
  completed       Boolean   @default(false)
  deleted         Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  style           Style     @relation(fields: [style_id], references: [style_id], onDelete: Restrict, onUpdate: Restrict)
  todolist        Todolist  @relation(fields: [todolist_id], references: [todolist_id], onDelete: Cascade, onUpdate: Cascade)
}

model Note {
  note_id         String    @id @db.VarChar(255)
  user_id         String
  style_id        Int
  note_title      String    @default("No title") @db.VarChar(255)
  content         String    @db.LongText
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  style           Style     @relation(fields: [style_id], references: [style_id], onDelete: Restrict, onUpdate: Restrict)
  user            User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
}
