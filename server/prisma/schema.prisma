// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id
  email             String    @unique
  name              String    @unique
  password          String
  role              Role      @default(USER)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  todolist          Todolist[]
  todoitem          Todoitem[]
  note              Note[]
}

enum Role {
  USER
  ADMIN
}

model Todolist {
  todolist_id     String    @id
  todolist_title  String    @default("No title")
  author          User      @relation(fields: [author_id], references: [id])
  author_id       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  todoitem        Todoitem[]
}

model Todoitem {
  todo_id         String    @id
  todolist        Todolist  @relation(fields: [todolist_id], references: [todolist_id])
  todolist_id     String
  todo_title      String    @default("No title")
  completed       Boolean   @default(false)
  deleted         Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  author          User      @relation(fields: [author_id], references: [id])  // 2個リレーションを作る意味はあるのか
  author_id       String
}

model Note {
  note_id         String    @id
  note_title      String    @default("No title")
  constent        String    
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  author          User      @relation(fields: [author_id], references: [id])
  author_id       String
}

// schema 
// user は todolistのidとnoteのidをあわせて配列として持つ
// note_todolist_ids は todolistとnoteのid, そのauthorをもつ
// todo はそれが帰属するtodolistのid, そのauthorをもつ(念の為)
// notecontents はそれが帰属する noteのid, そのauthorを持つ
// notecontents　は今のところ一つのnoteに対して一つだけど、今後増えるかも(ブロックごとの管理とか)